---
# tasks file for ansible-role-sshd/

- name: "Include OS-specific variables"
  ansible.builtin.include_vars:
    file: "{{ ansible_os_family }}.yaml"

- name: "Gather the OpenSSH Server installed version (RedHat)"
  ansible.builtin.shell:
    cmd: ssh -V 2>&1 | cut -d "," -f 1 | cut -d "_" -f 2
  register: result
  when:
    - ansible_facts['os_family'] == 'RedHat'

- name: "Set the OpenSSH Server installed package version (RedHat)"
  ansible.builtin.set_fact:
    ssh_version: "{{ result.stdout }}"
  when:
    - ansible_facts['os_family'] == 'RedHat'

- name: "Gather the OpenSSH Server installed version (Debian)"
  ansible.builtin.shell:
    cmd: ssh -V 2>&1 | cut -d " " -f 1 | cut -d "_" -f 2
  register: result
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: "Set the OpenSSH Server installed package version (Debian)"
  ansible.builtin.set_fact:
    ssh_version: "{{ result.stdout }}"
  when:
    - ansible_facts['os_family'] == 'Debian'

- name: "Update SSH daemon (yum)"
  ansible.builtin.yum:
    name: "{{ ssh_package }}"
    state: latest
  when:
    - ansible_facts['pkg_mgr'] == 'yum'

- name: "Update SSH daemon (dnf)"
  ansible.builtin.dnf:
    name: "{{ ssh_package }}"
    state: latest
    disable_gpg_check: yes
  when:
    - ansible_facts['pkg_mgr'] == 'dnf'

- name: "Update SSH daemon (apt)"
  ansible.builtin.apt:
    name: "{{ ssh_package }}"
    state: latest
  when:
    - ansible_facts['pkg_mgr'] == 'apt'

- name: "Check for RSA Host key"
  ansible.builtin.stat:
    path: /etc/ssh/ssh_host_rsa_key
  register: result

- name: "Generating RSA host key"
  ansible.builtin.command: ssh-keygen -q -t rsa -f /etc/ssh/ssh_host_rsa_key -C "" -N ""
  args:
    creates: /etc/ssh/ssh_host_rsa_key
  when:
    - not result.stat.exists

- name: "Check for DSA Host key"
  ansible.builtin.stat:
    path: /etc/ssh/ssh_host_dsa_key
  register: result

- name: "Generating DSA host key"
  ansible.builtin.command: ssh-keygen -q -t dsa -f /etc/ssh/ssh_host_dsa_key -C "" -N ""
  args:
    creates: /etc/ssh/ssh_host_dsa_key
  when:
    - not result.stat.exists

- name: "Check for ECDSA Host key"
  ansible.builtin.stat:
    path: /etc/ssh/ssh_host_ecdsa_key
  register: result

- name: "Generating ECDSA host key"
  ansible.builtin.command: ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -C "" -N ""
  args:
    creates: /etc/ssh/ssh_host_ecdsa_key
  when:
    - not result.stat.exists

- name: "Check for ED25519 Host key (OpenSSH 6.7+)"
  ansible.builtin.stat:
    path: /etc/ssh/ssh_host_ed25519_key
  register: result
  when:
    - ssh_version is ansible.builtin.version('6.7', '>=')

- name: "Generating ED25519 host key (OpenSSH 6.7+)"
  ansible.builtin.command: ssh-keygen -q -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -C "" -N ""
  args:
    creates: /etc/ssh/ssh_host_ed25519_key
  when:
    - not result.stat.exists
    - ssh_version is ansible.builtin.version('6.7', '>=')

#- name: "Collect SHA256 hash of sshd_config file"
#  ansible.builtin.stat:
#    path: "{{ sshd_config }}"
#  register: config_file

#- name: "Deploy original SSH configuration file (RHEL6)"
#  ansible.builtin.template:
#    src: sshd_config_rhel6.j2
#    dest: "{{ sshd_config }}"
#  notify: "Restart SSH Daemon"
#  when:
#    - ansible_facts['os_family'] == 'RedHat'
#    - ansible_facts['distribution_major_version'] == '6'
#    - config_file.stat.checksum != "9ae0b14da869aa6d9b52442f85c96e86450b521a93c52c256f6660e683ad5ff7"

#- name: "Deploy original SSH configuration file (RHEL7)"
#  ansible.builtin.template:
#    src: sshd_config_rhel7.j2
#    dest: "{{ sshd_config }}"
#  notify: "Restart SSH Daemon"
#  when:
#    - ansible_facts['os_family'] == 'RedHat'
#    - ansible_facts['distribution_major_version'] == '7'
#    - config_file.stat.checksum != "86eb7bfb84dfe487161ac349fbea02a9c2c80de4e7bb9ca4148568924723a4b5"

#- name: "Deploy original SSH configuration file (RHEL8)"
#  ansible.builtin.template:
#    src: sshd_config_rhel8.j2
#    dest: "{{ sshd_config }}"
#  notify: "Restart SSH Daemon"
#  when:
#    - ansible_facts['os_family'] == 'RedHat'
#    - ansible_facts['distribution_major_version'] == '8'
#    - config_file.stat.checksum != "f58c5a5cabba4ce26d7f71c78c72be93dbc6bd00156e0688af2096bd4d83dba1"

- name: "Delete ED25519 HostKey from bottom of list (OpenSSH 6.7+)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "^HostKey /etc/ssh/ssh_host_ed25519_key"
    line: "HostKey /etc/ssh/ssh_host_ed25519_key"
    state: absent
    validate: 'sshd -T -f %s'
    mode: '0640'
  when:
    - ssh_version is ansible.builtin.version('6.7', '>=')

- name: "Insert ED25519 key above RSA Key (OpenSSH 6.7+)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    line: "HostKey /etc/ssh/ssh_host_ed25519_key"
    insertbefore: "HostKey /etc/ssh/ssh_host_rsa_key"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0640'
  when:
    - ssh_version is ansible.builtin.version('6.7', '>=')

- name: "Enable RSA HostKey (OpenSSH 5.3)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "^#HostKey /etc/ssh/ssh_host_rsa_key"
    line: "HostKey /etc/ssh/ssh_host_rsa_key"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0640'
  when:
    - ssh_version is ansible.builtin.version('5.4', '<=')

- name: "Enable ECDSA HostKey (OpenSSH 5.3)"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    line: "HostKey /etc/ssh/ssh_host_ecdsa_key"
    insertafter: "HostKey /etc/ssh/ssh_host_rsa_key"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0640'
  when:
    - ssh_version is ansible.builtin.version('5.4', '<=')

- name: "Update SSH configuration to be more secure"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication {{ password_authentication }}"
    - regexp: "^PubkeyAuthentication"
      line: "PubkeyAuthentication {{ public_key_authentication }}"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin {{ permit_root_login }}"
    - regexp: "^#PermitUserEnvironment"
      line: "PermitUserEnvironment {{ permit_userenv }}"
    - regexp: "^Port"
      line: "Port {{ ssh_port }}"
    - regexp: "^UseDNS"
      line: "UseDNS {{ use_dns }}"
    - regexp: "^IgnoreRhosts"
      line: "IgnoreRhosts {{ ignore_rhosts }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords {{ permit_empty_password }}"
    - regexp: "^ChallengeResponseAuthentication"
      line: "ChallengeResponseAuthentication {{ challenge_response_auth }}"
    - regexp: "^GSSAPIAuthentication"
      line: "GSSAPIAuthentication {{ gss_api_authentication }}"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding {{ x11_forwarding }}"
    - regexp: "^ClientAliveInterval"
      line: "ClientAliveInterval {{ client_alive_int }}"
    - regexp: "^ClientAliveCountMax"
      line: "ClientAliveCountMax {{ client_alive_max }}"
    - regexp: "^LoginGraceTime"
      line: "LoginGraceTime {{ login_grace_time }}"
    - regexp: "^MaxAuthTries"
      line: "MaxAuthTries {{ max_auth_tries }}"
    - regexp: "^MaxSessions"
      line: "MaxSessions {{ max_sessions }}"
    - regexp: '^MaxStartups'
      line: 'MaxStartups {{ max_startups }}'
    #- regexp: "^#LogLevel"
    #  line: "LogLevel {{ log_level }}"
    - regexp: "^Subsystem"
      line: "Subsystem	sftp	{{ sftp_server }} -f {{ log_facility }} -l INFO"

#- name: "Update SSH configuration MaxStartups directive (OpenSSH 6.7+)"
#  ansible.builtin.lineinfile:
#    dest: "{{ sshd_config }}"
#    regexp: '^MaxStartups'
#    line: 'MaxStartups {{ max_startups }}'
#    state: present
#    validate: 'sshd -T -f %s'
#    mode: '0600'
#  when:
#      - ssh_version is ansible.builtin.version('6.7', '>=')

- name: "Add AllowTcpForwarding setting in SSH configuration for jump servers"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  with_items:
    - regexp: "^#AllowTcpForwarding"
      line: "AllowTcpForwarding yes"
  when:
    - "'jump_servers' in group_names"

- name: "Check for issue.j2 template file"
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/custom/issue.j2"
  delegate_to: localhost
  register: issue_template

- name: "Configure Console Login Banner"
  ansible.builtin.template:
    src: "{{ playbook_dir }}/custom/issue.j2"
    dest: "{{ banner_console }}"
  when:
    - issue_template.stat.exists

- name: "Configure Remote Login Banner"
  ansible.builtin.template:
    src: "{{ playbook_dir }}/custom/issue.j2"
    dest: "{{ banner_remote }}"
  when:
    - issue_template.stat.exists

- name: "Update SSH configuration to include Login Banners"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "^Banner"
    line: "Banner {{ banner_remote }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  when:
    - issue_template.stat.exists

# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening#examples-of-opting-out-of-system-wide-crypto-policies_using-the-system-wide-cryptographic-policies
- name: "Opt-out of Crypto Policy in /etc/sysconfig/sshd (RHEL8)"
  ansible.builtin.lineinfile:
    dest: /etc/sysconfig/sshd
    regexp: "^#.CRYPTO_POLICY="
    line: "CRYPTO_POLICY="
    state: present
    mode: '0600'
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] == '8'

- name: "Define KexAlgorithms, Ciphers & MAC's (OpenSSH 6.7+)"
  ansible.builtin.set_fact:
    kex_algorithms: "curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256"
    ciphers: "aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr"
    macs: "hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com"
  when:
    - ssh_version is ansible.builtin.version('6.7', '>=')

- name: "Define KexAlgorithms, Ciphers & MAC's (OpenSSH 5.3)"
  ansible.builtin.set_fact:
    kex_algorithms: "diffie-hellman-group-exchange-sha256"
    ciphers: "aes256-ctr,aes192-ctr,aes128-ctr"
    macs: "hmac-sha2-512,hmac-sha2-256"
  when:
    - ssh_version is ansible.builtin.version('5.4', '<=')

- name: "Update KexAlgorithms, Ciphers & MAC's in SSH configuration"
  ansible.builtin.lineinfile:
    dest: "{{ sshd_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  with_items:
    - regexp: "^KexAlgorithms"
      line: "KexAlgorithms {{ kex_algorithms }}"
    - regexp: "^Ciphers"
      line: "Ciphers {{ ciphers }}"
    - regexp: "^MACs"
      line: "MACs {{ macs }}"

# Add group to AllowedGroups in SSH configuration
- name: "Check for groups existence"
  ansible.builtin.shell:
    cmd: getent group "{{ ssh_group }}"
  ignore_errors: true
  register: result
  #failed_when: result.rc >=3
  when:
    - ssh_group is defined

- name: "Create group if it does not exist"
  ansible.builtin.group:
    name: "{{ ssh_group }}"
    state: present
  when:
    - ssh_group is defined
    - result.rc != 0

- name: "Check if AllowGroups config exists in sshd_config"
  ansible.builtin.shell:
    cmd: cat {{ sshd_config }} | grep AllowGroups | cut -d ' ' -f 2-
  ignore_errors: true
  register: result
  #failed_when: result.rc >=3
  when:
    - ssh_group is defined
    #- result.rc == 0

- name: "Set fact for AllowedGroups"
  ansible.builtin.set_fact:
    allowed_groups: "{{ result.stdout }}"
  when:
    - ssh_group is defined
    - result.rc == 0

- name: "Add group to AllowGroups in SSH configuration"
  ansible.builtin.lineinfile:
    path: "{{ sshd_config }}"
    regexp: '^AllowGroups.'
    line: 'AllowGroups {{ ssh_group }}'
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  when:
    - allowed_groups is not defined
    - ssh_group is not search(" ")

- name: "Add group to AllowGroups in SSH configuration (spaces)"
  ansible.builtin.lineinfile:
    path: "{{ sshd_config }}"
    regexp: '^AllowGroups.'
    line: 'AllowGroups "{{ ssh_group }}"'
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  when:
    - allowed_groups is not defined
    - ssh_group is search(" ")

- name: "Append group to AllowGroups in SSH configuration, if group found"
  ansible.builtin.lineinfile:
    path: "{{ sshd_config }}"
    regexp: '^AllowGroups.'
    line: 'AllowGroups {{ allowed_groups }} {{ ssh_group }}'
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  when:
    - allowed_groups is defined
    - allowed_groups is not search(ssh_group)
    - ssh_group is not search(" ")

- name: "Append group to AllowGroups in SSH configuration, if group found (spaces)"
  ansible.builtin.lineinfile:
    path: "{{ sshd_config }}"
    regexp: '^AllowGroups.'
    line: 'AllowGroups {{ allowed_groups }} "{{ ssh_group }}"'
    state: present
    validate: 'sshd -T -f %s'
    mode: '0600'
  when:
    - allowed_groups is defined
    - allowed_groups is not search(ssh_group)
    - ssh_group is search(" ")

- name: "Restart SSH daemon"
  ansible.builtin.service:
    name: "{{ ssh_daemon }}"
    state: restarted
